define('two/ui/autoComplete', [
    'two/utils',
    'two/locale',
    'helper/dom',
    'struct/MapData'
], function (
    utils,
    Locale,
    domHelper,
    $mapData
) {
    /**
     * Auto-complete identification used to filter events from
     * eventTypeProvider.SELECT_SELECTED and receive the data.
     *
     * @type {String}
     */
    var id = 'two-autocomplete'

    /**
     * Identify if the Auto-complete element is visible.
     * Used to hide the element if a click outside the select
     * is detected.
     *
     * @type {Boolean}
     */
    var visible = false

    /**
     * Detect clicks outside the Auto-complete select element and hide it.
     *
     * @param {Object} event - Click event.
     */
    var hideClick = function (event) {
        var elem = event.srcElement || event.target

        if (!utils.matchesElem(elem, '.custom-select')) {
            autoComplete.hide()
        }
    }

    /**
     * Handle the events when a option is selected.
     *
     * @param {Object} data - Data of the selected item.
     */
    var onSelect = function (data, args) {
        autoComplete.hide()
        $rootScope.$broadcast(eventTypeProvider.SELECT_HIDE, id)
        $rootScope.$broadcast(eventTypeProvider.SELECT_SELECTED, id, data, args)
    }

    /**
     * autoComplete public methods.
     *
     * @type {Object}
     */
    var autoComplete = {}

    /**
     * Hide Auto-complete select element.
     */
    autoComplete.hide = function () {
        $rootScope.$broadcast(eventTypeProvider.SELECT_HIDE, id)

        $(window).off('click', hideClick)
        $('.win-main').off('mousewheel', autoComplete.hide)

        visible = false
    }

    /**
     * Display the Auto-complete element.
     *
     * @param {Object} data - Object generated by routeProvider.AUTOCOMPLETE
     * @param {Element} $elem - Element where the select will show up next to.
     * @param {String} selectId - AutoComplete unique identification.
     * @param {Any=} args - Custom value.
     *
     * @return {Boolean} !!autocomplete-showed
     */
    autoComplete.show = function show (data, $elem, selectId, args) {
        id = selectId

        if (!data.length) {
            return false
        }

        $rootScope.$broadcast(
            eventTypeProvider.SELECT_SHOW,
            id,
            data,
            null,
            function (data) {
                onSelect(data, args)
            },
            $elem,
            true,
            0,
            Locale('common', 'no-results')
        )

        if (!visible) {
            visible = true

            $('.win-main').on('mousewheel', autoComplete.hide)
            $(window).on('click', hideClick)
        }

        return true
    }

    /**
     * Search village/character/tribe by coords/name/tag.
     *
     * @param {String} Coords/name/tag.
     * @param {Function} callback
     * @param {Array=} types - Types of items to be searched:
     *   village, character or tribe.
     * @param {Number=} amount - Limit the amount of returned items.
     */
    autoComplete.search = function (value, callback, types, amount) {
        var results = []

        if (utils.isValidCoords(value)) {
            var coords = value.split('|').map(function (coord) {
                return parseInt(coord, 10)
            })

            $mapData.loadTownDataAsync(coords[0], coords[1], 1, 1, function (village) {
                if (village) {
                    results.push({
                        id: village.id,
                        type: 'village',
                        name: utils.genVillageLabel(village),
                        raw: village
                    })
                }

                callback(results)
            })

            return
        }

        socketService.emit(routeProvider.AUTOCOMPLETE, {
            types: types || ['village', 'character', 'tribe'],
            string: value,
            amount: amount || 5
        }, function (data) {
            for (var type in data.result) {
                data.result[type].forEach(function (item, i) {
                    if (type === 'village') {
                        item.raw = angular.copy(item)
                        item.name = utils.genVillageLabel(item)
                    }

                    item.type = type
                    item.leftIcon = 'size-34x34 icon-26x26-rte-' + type


                    results.push(item)
                })
            }

            callback(results)
        })
    }

    return autoComplete
})
